자바의 정석 기초편(객체지향개념만)

6장
15강. - static과 인스턴스 변수
static 메서드(객체 생성 없이 호출 가능)와 인스턴스 메서드의 차이는 "인스턴스 변수"를 사용할 수 있나 없나에 따라 달려있음. 
인스턴스 메서드는 인스턴스 변수 사용 가능. static 메서드는 변수 사용 불가.

메서드가 밭는 파라미터는 해당 메서드의 로컬변수(지역변수)를 나타냄.
메서드를 만들면 static을 붙일지 말지 고민해야하는데 "iv(인스턴스변수)를 사용할거면 붙이지 말아야함!"

객체란? iv 의 묶음이다.
static 메서드 사용 방법 : 클래스이름.메서드이름(); / static 메서드 사용방법 > iv가 필요 없으므로 객체도 필요 없다는 뜻. (항상 언제든지 호출 가능)
인스턴스 메서드 사용 방법 : new로 객체 생성 뒤 > 참조변수.메서드이름(); / 인스턴스 메서드 사용방법

static : 속성 중에서 공통 속성에 static을 붙임. / 인스턴스 멤버(iv, im)을 사용하지 않는 메서드에 static을 붙임.
static 메서드 안에서 인스턴스 변수나 메서드를 사용할려면 객체를 생성 후 호출 가능하다. 그냥은 인스턴스 변수 사용 불가.
인스턴스 메서드는 이미 객체가 생성되어 있으므로 인스턴스 변수를 사용 가능.


16강. - 오버로딩
매개변수는 다르지만 같은 의미의 기능 수행할때 메서드 오버로딩을 한다.
한 클래스 안에 같은 이름의 메서드 여러개 정의하는것 (ex. println)
성립 조건 3개
	1. 매서드 이름이 같아야한다.
	2. 매개변수의 개수 또는 타입이 달라야한다.
		> 사용할 메서드에서 파라미터로 입력한 값이 어떤 오버로딩 메서드를 호출할지 애매하면 컴파일러 에러가 뜸.
	3. 반환 타입은 영향 없다. > 반환 타입만 다르면 오버라이딩인가?


17강 - 생성자(constructor)
- 인스턴스가 생성될때마다 호출되는 '인스턴스 초기화 메서드' > iv 초기화를 편리하게 하려고 생성함.
	처음 인스턴스가 생성될땐 0으로 default 값을 갖음. 사용자가 값을 정해주는게 초기화. > 객체가 초기화
	객체 생성 후 iv 초기화 하는것을 메서드를 사용해서 한줄로 단축. (생성자를 만들어줘야함)
	우리가 생성하지 않아도 기본적으로 컴파일러가 기본 생성자를 스스로 생성함.

생성자 규칙
	1. 클래스 이름 == 생성자 이름
	2. 모든 클래스는 꼭 하나 이상의 생성자가 있어야함. 사용자가 지정하지 않으면 기본생성자 생성.
	3. 리턴값이 없다. (void 안붙임 : 항상 반환자가 없기 때문.)


기본 생성자(default constructor) 
	- 매개변수(파라미터)가 없는 생성자.
	- 생성자가 하나도 없을때만 컴파일러가 기본 생성자 자동추가.
	- 매개변수가 없는 생성자와 받는 생성자 둘다 필요하다면 둘다 명시해줘야함.
	- 클래스 만들때 기본 생성자 만드는것을 습관 들이기.

18강 - 생성자 this(), 참조변수 this (둘이 완전히 다른것!!)

1. 생성자 this()
- 생성자에서 다른 생성자 호출할 때 사용.
	-this("white"); 대신 classname("white");를 호출하면 에러 
- 다른 생성자 호출 시 첫줄에서만 사용 가능.
	- 여기서도 classname으로 호출이 아닌 this를 사용해서 호출해야함.
- 생성자. 같은 클래스의 다른 생성자를 호출할 때 사용한다.

2. 참조변수 this
- 인스턴스 자신을 가리키는 참조변수
- 인스턴스 메서드(생성자 포함)에서 사용가능
- 지역변수(lv)와 인스턴스변수(iv)를 구별할 때 사용.
- 같은 클래스 내에선 this. 생략 가능하지만 lv와 이름이 같다면 iv앞에 this. 붙여야함.
- 인스턴스 자신을 가리키는 참조변수. 인스턴스의 주소가 저장되어 있다.
- 모든 인스턴스메서드에 지역변수로 숨겨진 채로 존재한다.
- static 메서드에서 iv의 이름과 같더라도 인스턴스 변수를 사용하지 못하므로 this. 사용 불가.
- 인스턴스 메서드와 생성자에서만 사용 가능.


19강. 변수의 초기화
- 지역변수(lv)는 수동 초기화 해야함 
- 멤버변수(iv, cv)는 자동으로 default 값으로 초기화 됨. (boolean = false, 참조형 = null) 
	참조형의 초기화란 객체를 생성(new ~)해서 넣어주는 것까지 나타냄.(Engine e = null)

초기화 종류.
(자동(defualt 초기화), 간단, 복잡)
1. 명시적 초기화(=) // 간단
2. 초기화 블럭 (복잡한 초기화 즉 여러문장 넣는데 사용) // 복잡
	인스턴스 초기화 블럭 : {}
	클래스 초기화 블럭 : static {}
3. 생성자 // 복잡

멤버변수(cv, iv)의 초기화 - static {}
1. 명시적 초기화(=)
2. 초기화 블럭 - {}, static{}
3. 생성자(iv초기화)

초기화 시점
	클래스변수 : 클래스가 처음 로딩될때 단 한번
	인스턴스 변수 : 인스턴스가 생성될 때마다
초기화 순서	
	1. cv(클래스변수)가 먼저 초기화 된 후 인스턴스 변수(iv)의 초기화가 일어남.
	2. 자동(0으로 초기화) > 간단(=) > 복잡(static{} 과 생성자)
